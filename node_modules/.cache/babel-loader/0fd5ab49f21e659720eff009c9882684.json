{"ast":null,"code":"import React from 'react';\nimport Board from './components/Board';\nimport Bishop from './pieces/bishop';\nexport default function ini() {\n  //const square = Array(64).fill(null);\n\n  /*for(let i = 8; i < 16; i++){\n    squares[i] = new Pawn(2);\n    squares[i+40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n   squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n  */\n  this.completeBoard[0][3] = new Bishop(2);\n  this.completeBoard[0][6] = new Bishop(2);\n  /*  squares[58] = new Bishop(1);\n    squares[61] = new Bishop(1);\n  \n    squares[3] = new Queen(2);\n    squares[4] = new King(2);\n  \n    squares[59] = new Queen(1);\n    squares[60] = new King(1);\n  */\n\n  return this.completeBoard;\n}\n/*  constructor(props){\n    super(props);\n  }\n\n  render(){\n  for(var i=8;i>=1;i--){\n    for(var j=0;j<8;j++){\n      const p=this.Board.retPosition(i,j);\n      if(p==='a1'){\n      this.setState({piece:'R'});\n    }}}\n    return(this.state.piece);\n  }\n*/\n\n/*  return(pos === 'a1' ? 'R' :'') ; /* a2=P; a7=p;  a8=r;\n  b1=N;  b2=P; b7=p;  b8=n;\n  c1=B;  c2=P; c7=p;  c8=b;\n  d1=Q;  d2=P; d7=p;  d8=q;\n  e1=K;  e2=P; e7=p;  e8=k;\n  f1=B;  f2=P; f7=p;  f8=b;\n  g1=N;  g2=P; g7=p;  g8=n;\n  h1=R;  h2=P; h7=p;  h8=r;   */","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/initialBoard.js"],"names":["React","Board","Bishop","ini","completeBoard"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,eAAe,SAASC,GAAT,GAAc;AAC3B;;AAEA;;;;;;;;;;;;;AAcA,OAAKC,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,IAA2B,IAAIF,MAAJ,CAAW,CAAX,CAA3B;AACA,OAAKE,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,IAA2B,IAAIF,MAAJ,CAAW,CAAX,CAA3B;AACF;;;;;;;;;;AASE,SAAO,KAAKE,aAAZ;AACD;AAUD;;;;;;;;;;;;;;;AAcA","sourcesContent":["import React from 'react';\nimport Board from './components/Board';\nimport Bishop from './pieces/bishop';\nexport default function ini(){\n  //const square = Array(64).fill(null);\n\n  /*for(let i = 8; i < 16; i++){\n    squares[i] = new Pawn(2);\n    squares[i+40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n\n  squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n*/\n  this.completeBoard[0][3] = new Bishop(2);\n  this.completeBoard[0][6] = new Bishop(2);\n/*  squares[58] = new Bishop(1);\n  squares[61] = new Bishop(1);\n\n  squares[3] = new Queen(2);\n  squares[4] = new King(2);\n\n  squares[59] = new Queen(1);\n  squares[60] = new King(1);\n*/\n  return this.completeBoard;\n}\n\n\n\n\n\n\n\n\n\n/*  constructor(props){\n    super(props);\n  }\n\n  render(){\n  for(var i=8;i>=1;i--){\n    for(var j=0;j<8;j++){\n      const p=this.Board.retPosition(i,j);\n      if(p==='a1'){\n      this.setState({piece:'R'});\n    }}}\n    return(this.state.piece);\n  }\n*/\n/*  return(pos === 'a1' ? 'R' :'') ; /* a2=P; a7=p;  a8=r;\n  b1=N;  b2=P; b7=p;  b8=n;\n  c1=B;  c2=P; c7=p;  c8=b;\n  d1=Q;  d2=P; d7=p;  d8=q;\n  e1=K;  e2=P; e7=p;  e8=k;\n  f1=B;  f2=P; f7=p;  f8=b;\n  g1=N;  g2=P; g7=p;  g8=n;\n  h1=R;  h2=P; h7=p;  h8=r;   */\n"]},"metadata":{},"sourceType":"module"}