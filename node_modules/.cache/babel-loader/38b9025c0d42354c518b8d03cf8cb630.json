{"ast":null,"code":"import * as Chess from 'chess.js';\nimport pieceMap from '../PieceMapping';\nexport default class ChessManager {\n  constructor(props) {\n    //  super(props);\n    this.chess = new Chess();\n  }\n\n  reset() {\n    this.chess.reset();\n  }\n\n  clear() {\n    this.chess.clear();\n  }\n\n  move(from, to) {\n    this.chess.move({\n      from: from,\n      to: to,\n      promotion: 'q'\n    });\n\n    if (this.chess.game_over()) {\n      console.log(\"Game Over\");\n\n      if (this.chess.in_checkmate()) {\n        console.log(\"Checkmated\");\n      } else if (this.chess.in_draw()) {\n        console.log(\"Game Drawn\");\n      } else if (this.chess.in_stalemate()) {\n        console.log(\"Game Drawn as oponent is in Stalemate\");\n      } else if (this.chess.in_threefold_repetition()) {\n        console.log(\"Game Drawn as current board position has occurred three or more times.\");\n      } else if (this.chess.insufficient_material()) {\n        console.log(\"Game Drawn due to insufficient material.\");\n      }\n    } else if (this.chess.in_check() == true) {\n      console.log(\"In Check\");\n    }\n  }\n\n  map() {\n    var str = this.chess.fen(); //maps fen string against our board\n\n    const c = [];\n\n    for (let i = 0, j = 0; i < 64 && j < 64; i++) {\n      var char = pieceMap(str[i]);\n\n      if (char === Number(char)) {\n        for (let k = 1; k <= Number(char); k++) {\n          c[j] = '';\n          j++;\n        }\n      } else if (char === '/') {\n        continue;\n      } else {\n        c[j] = char;\n        j++;\n      }\n    }\n\n    return c;\n  }\n\n}","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/services/ChessManager.js"],"names":["Chess","pieceMap","ChessManager","constructor","props","chess","reset","clear","move","from","to","promotion","game_over","console","log","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","in_check","map","str","fen","c","i","j","char","Number","k"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,eAAe,MAAMC,YAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB;AACE,SAAKC,KAAL,GAAW,IAAIL,KAAJ,EAAX;AACD;;AACDM,EAAAA,KAAK,GAAE;AACL,SAAKD,KAAL,CAAWC,KAAX;AACD;;AACDC,EAAAA,KAAK,GAAE;AACL,SAAKF,KAAL,CAAWE,KAAX;AACD;;AACDC,EAAAA,IAAI,CAACC,IAAD,EAAMC,EAAN,EAAS;AACX,SAAKL,KAAL,CAAWG,IAAX,CAAgB;AAACC,MAAAA,IAAI,EAACA,IAAN;AAAaC,MAAAA,EAAE,EAACA,EAAhB;AAAoBC,MAAAA,SAAS,EAAC;AAA9B,KAAhB;;AACA,QAAG,KAAKN,KAAL,CAAWO,SAAX,EAAH,EAA0B;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,UAAG,KAAKT,KAAL,CAAWU,YAAX,EAAH,EAA6B;AAC3BF,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,OAFD,MAGK,IAAG,KAAKT,KAAL,CAAWW,OAAX,EAAH,EAAwB;AAC3BH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,OAFI,MAGA,IAAG,KAAKT,KAAL,CAAWY,YAAX,EAAH,EAA6B;AAChCJ,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD,OAFI,MAGA,IAAG,KAAKT,KAAL,CAAWa,uBAAX,EAAH,EAAwC;AAC3CL,QAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACD,OAFI,MAGA,IAAG,KAAKT,KAAL,CAAWc,qBAAX,EAAH,EAAsC;AACzCN,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACD;AACF,KAjBD,MAkBK,IAAG,KAAKT,KAAL,CAAWe,QAAX,MAAuB,IAA1B,EAA+B;AAClCP,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;AACF;;AAEDO,EAAAA,GAAG,GAAE;AACH,QAAIC,GAAG,GAAE,KAAKjB,KAAL,CAAWkB,GAAX,EAAT,CADG,CACkE;;AACrE,UAAMC,CAAC,GAAC,EAAR;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAN,EAAUC,CAAC,GAAC,CAAhB,EAAmBD,CAAC,GAAC,EAAF,IAAQC,CAAC,GAAC,EAA7B,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,UAAIE,IAAI,GAAC1B,QAAQ,CAACqB,GAAG,CAACG,CAAD,CAAJ,CAAjB;;AACA,UAAGE,IAAI,KAAKC,MAAM,CAACD,IAAD,CAAlB,EACA;AACE,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAED,MAAM,CAACD,IAAD,CAArB,EAA4BE,CAAC,EAA7B,EAAgC;AAC9BL,UAAAA,CAAC,CAACE,CAAD,CAAD,GAAK,EAAL;AACAA,UAAAA,CAAC;AACF;AACF,OAND,MAOK,IAAGC,IAAI,KAAK,GAAZ,EAAgB;AACnB;AACD,OAFI,MAGD;AACJH,QAAAA,CAAC,CAACE,CAAD,CAAD,GAAOC,IAAP;AACAD,QAAAA,CAAC;AACA;AACF;;AACD,WAAOF,CAAP;AACD;;AAzD8B","sourcesContent":["import * as Chess from 'chess.js';\nimport pieceMap from '../PieceMapping';\n\nexport default class ChessManager{\n  constructor(props){\n  //  super(props);\n    this.chess=new Chess();\n  }\n  reset(){\n    this.chess.reset();\n  }\n  clear(){\n    this.chess.clear();\n  }\n  move(from,to){\n    this.chess.move({from:from , to:to ,promotion:'q'});\n    if(this.chess.game_over()){\n      console.log(\"Game Over\");\n      if(this.chess.in_checkmate()){\n        console.log(\"Checkmated\");\n      }\n      else if(this.chess.in_draw()){\n        console.log(\"Game Drawn\");\n      }\n      else if(this.chess.in_stalemate()){\n        console.log(\"Game Drawn as oponent is in Stalemate\");\n      }\n      else if(this.chess.in_threefold_repetition()){\n        console.log(\"Game Drawn as current board position has occurred three or more times.\");\n      }\n      else if(this.chess.insufficient_material()){\n        console.log(\"Game Drawn due to insufficient material.\");\n      }\n    }\n    else if(this.chess.in_check()==true){\n      console.log(\"In Check\");\n    }\n  }\n\n  map(){\n    var str =this.chess.fen();                                           //maps fen string against our board\n    const c=[];\n    for(let i=0 , j=0 ;i<64 && j<64;i++ ){\n      var char=pieceMap(str[i]);\n      if(char === Number(char))\n      {\n        for(let k=1;k<=Number(char);k++){\n          c[j]='';\n          j++;\n        }\n      }\n      else if(char === '/'){\n        continue;\n      }\n      else{\n      c[j] = char;\n      j++;\n      }\n    }\n    return(c);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}