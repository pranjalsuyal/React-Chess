{"ast":null,"code":"var _jsxFileName = \"/home/pranjal/Projects/chess/src/components/Game.js\";\nimport React from 'react';\nimport ChessManager from '../services/ChessManager';\nimport MappedBoard from './MappedBoard';\nimport '../index.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: [] //Array which stores image address of Board to be mapped\n\n    };\n\n    this.movefunc = (position, piece) => {\n      if (piece !== '') {\n        if (this.source !== '') {\n          this.chessManager.move(this.source, position);\n          this.setState({\n            address: this.chessManager.map()\n          });\n          this.source = '';\n        } else {\n          this.source = position;\n        }\n      } else {\n        if (this.source !== '') {\n          this.chessManager.move(this.source, position);\n          this.setState({\n            address: this.chessManager.map()\n          });\n          this.source = '';\n        }\n      }\n    };\n\n    this.eventReset = e => {\n      e.preventDefault();\n      this.chessManager.reset();\n      this.setState({\n        address: this.chessManager.map()\n      });\n    };\n\n    this.eventClear = e => {\n      e.preventDefault();\n      this.chessManager.clear();\n      this.setState({\n        address: this.chessManager.map()\n      });\n    };\n\n    this.chessManager = new ChessManager();\n  }\n\n  retPosition(y, x) {\n    //returns postion of the square on the board\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let retVal = xAxis[xCord] + yCord;\n    return retVal;\n  }\n\n  isEven(num) {\n    return num % 2 === 0;\n  }\n\n  componentDidMount() {\n    this.chessManager.reset();\n    this.setState({\n      address: this.chessManager.map()\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(MappedBoard, {\n      address: this.state.address,\n      movefunc: this.movefunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), \"hi hello this is a segment.\"), React.createElement(\"button\", {\n      onClick: this.eventReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.eventClear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Clear Board\"));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/components/Game.js"],"names":["React","ChessManager","MappedBoard","Game","Component","constructor","props","state","address","movefunc","position","piece","source","chessManager","move","setState","map","eventReset","e","preventDefault","reset","eventClear","clear","retPosition","y","x","yCord","xCord","xAxis","retVal","isEven","num","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChessManager from '../services/ChessManager';\nimport  MappedBoard from './MappedBoard';\nimport '../index.css';\nclass Game extends React.Component{\n  constructor(props){\n    super(props);\n    this.chessManager=new ChessManager();\n  }\n  state = {\n    address:[]                                        //Array which stores image address of Board to be mapped\n  };\n  retPosition(y,x){                                   //returns postion of the square on the board\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a','b','c','d','e','f','g','h'];\n    let retVal = xAxis[xCord]+yCord;\n    return retVal;\n  }\n  isEven(num){\n    return (num % 2 === 0);\n  }\n\n  movefunc = (position,piece) => {\n    if(piece!==''){\n      if(this.source!==''){\n        this.chessManager.move(this.source , position);\n        this.setState({address : this.chessManager.map()});\n        this.source='';\n      }\n      else{\n        this.source = position;\n      }\n    }\n    else{\n      if(this.source!==''){\n        this.chessManager.move(this.source , position);\n        this.setState({address : this.chessManager.map()});\n        this.source='';\n      }\n    }\n  }\n  componentDidMount(){\n    this.chessManager.reset();\n    this.setState({ address : this.chessManager.map()});\n  }\n  eventReset=(e)=>{\n    e.preventDefault();\n    this.chessManager.reset();\n    this.setState({ address : this.chessManager.map()});\n  }\n  eventClear=(e)=>{\n    e.preventDefault();\n    this.chessManager.clear();\n    this.setState({ address : this.chessManager.map()});\n  }\n  render(){\n    return (\n      <div>\n      <div>\n      <MappedBoard\n        address={this.state.address}\n        movefunc={this.movefunc}\n      />hi hello this is a segment.\n\n\n      </div>\n      <button\n        onClick={this.eventReset}\n      >Reset</button>\n      <button\n        onClick={this.eventClear}\n      >Clear Board</button>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}