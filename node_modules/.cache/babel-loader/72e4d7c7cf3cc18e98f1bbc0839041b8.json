{"ast":null,"code":"var _jsxFileName = \"/home/pranjal/Projects/chess/src/components/Board.js\";\nimport React from 'react';\nimport * as Chess from 'chess.js';\nimport Square from './Square';\nimport ini from '../initialBoard';\nimport MappedBoard from './mappedBoard'; //import map from '../mapfen';\n\nimport '../index.css';\n\nclass Board extends React.Component {\n  /*componentDidMount(){\n    for(var i=8;i>=1;i--){\n      for(var j=0;j<8;j++){\n        const p=this.retPosition(i,j);\n        this.setState({piece:ini(p)});\n      }}\n    }\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: [] // this.setState({ piece : initialBoard()});\n\n      /*  processClick(position){\n        //TODO handle position click.\n        console.log(\"Position is\", position);\n          console.log(\"board is in process\", this.chessBoard.board());\n           this.chessBoard.move(this.retPosition(position));\n          console.log(\"board after move\", this.chessBoard.board);\n       }  */\n\n    };\n\n    this.eventReset = e => {\n      //  this.map(this.chess.fen());\n      e.preventDefault();\n      var a = this.mapy(this.chess.fen());\n      console.log(\"value recv\", a); //  a.map(item => console.log(item));\n      //  this.state.pieceSrc= a.map(item => this.setState({ pieceSrc : item }));\n\n      var b = [];\n\n      for (let i = 8; i >= 1; i--) {\n        for (let j = 0; j < 8; j++) {\n          b[i] = this.retPosition(i, j);\n        }\n      } ////      var b = this.mapArrayToBoard(8,0,a);\n\n\n      this.setState({\n        address: a\n      }); //  console.log(this.mapy(this.chess.fen()));\n\n      console.log(this.state.address);\n    };\n\n    this.chess = new Chess();\n    /*  this.state = {\n        pieceSrc :null,          //this.map(this.chess.fen())\n      };\n      */\n\n    console.log(\"board is\", this.chess);\n    console.log(this.chess.ascii()); //  this.chess.move('e3');\n    //  console.log(this.chess.ascii());\n\n    console.log(this.chess.fen()); //  this.setState({pieceSrc : map(this.chess.fen())});\n    //  console.log(this.chess.get('e3'));\n    //  this.chess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\n    //  console.log(this.chess.ascii());\n    //  console.log(this.convert(this.chess.ascii()));\n  }\n  /*  convert(str){\n      var a='';\n      for(let i= 35; i<58 ;i++){\n      a += str[i];\n      }\n      return(a);\n  }\n  */\n\n\n  retPosition(y, x) {\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let retVal = xAxis[xCord] + yCord; //console.log(retVal);\n\n    return retVal;\n  }\n\n  isEven(num) {\n    return num % 2 === 0;\n  }\n\n  mapy(str) {\n    const c = [];\n    var j;\n\n    for (let i = 0, j = 0; i < 44; i++ && j++) {\n      var char = ini(str[i]);\n      /*  if(Number(char)===true)               //is char a number?\n      {\n        for(let j=0;j<Number(char);j++){\n          c[i]='';\n      }\n      if(char==='/')\n      {\n        continue;\n      }\n       else{ */\n\n      c[j] = char; //  c[j] = (char)!Number(char) ? char :  ;\n\n      console.log(\"character returns\", Number(c[j]));\n    } //If it is a number.\n    //}\n    //this.setState({pieceSrc: c});\n    //}\n\n\n    console.log(\"Mapy returns\", c);\n    return c;\n  }\n\n  mapArrayToBoard(i, j, ar) {\n    var p = this.retPosition(i, j);\n\n    switch (p) {\n      case 'a8':\n        return ar[0]; //  console.log(ar[0]);\n\n        break;\n\n      case 'a7':\n        return ar[1];\n        break;\n\n      default:\n        return ar[18];\n    }\n  }\n\n  render() {\n    /*   var completeBoard =[];\n        for(var i=8;i>=1;i--){\n          var rowSquare =[];\n          for(var j=0;j<8;j++){\n            const squareColor = (this.isEven(i) && this.isEven(j)) || (!this.isEven(i) && !this.isEven(j))? \"square-white\" : \"square-black\";\n            rowSquare.push(<Square\n                              color={squareColor}\n                              position={this.retPosition(i,j)}\n                              key={this.retPosition(i,j)}\n                              pieceSrc={''}\n                          />);\n          }\n          completeBoard.push(rowSquare);\n        }\n      */\n\n    /*  var color=0;\n      var squares=[];\n      for(let i=0;i<64;i++)\n      {\n        if(i%16===0){\n          squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"KING\"} />);\n          color=0;\n        }\n        else if(i%8===0){\n          squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} piece={\"\"} />);\n          color = 1;\n        }\n        else if(color===1){\n          squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"\"} />);\n          color=0;\n        }\n        else{\n          squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} currentPiece={\"\"} />);\n          color=1;\n        }\n      }  */\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.eventReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(MappedBoard, {\n      address: this.state.address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/components/Board.js"],"names":["React","Chess","Square","ini","MappedBoard","Board","Component","constructor","props","state","address","eventReset","e","preventDefault","a","mapy","chess","fen","console","log","b","i","j","retPosition","setState","ascii","y","x","yCord","xCord","xAxis","retVal","isEven","num","str","c","char","Number","mapArrayToBoard","ar","p","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Chess from 'chess.js';\n\nimport Square from './Square';\nimport ini from '../initialBoard';\nimport  MappedBoard from './mappedBoard';\n//import map from '../mapfen';\nimport '../index.css';\nclass Board extends React.Component{\n\n\n/*componentDidMount(){\n  for(var i=8;i>=1;i--){\n    for(var j=0;j<8;j++){\n      const p=this.retPosition(i,j);\n      this.setState({piece:ini(p)});\n    }}\n  }\n*/\n constructor(props){\n    super(props);\n    this.chess= new Chess();\n  /*  this.state = {\n      pieceSrc :null,          //this.map(this.chess.fen())\n    };\n    */\n    console.log(\"board is\", this.chess);\n    console.log(this.chess.ascii());\n  //  this.chess.move('e3');\n  //  console.log(this.chess.ascii());\n    console.log(this.chess.fen());\n  //  this.setState({pieceSrc : map(this.chess.fen())});\n  //  console.log(this.chess.get('e3'));\n  //  this.chess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\n  //  console.log(this.chess.ascii());\n  //  console.log(this.convert(this.chess.ascii()));\n\n  }\n/*  convert(str){\n    var a='';\n    for(let i= 35; i<58 ;i++){\n    a += str[i];\n    }\n    return(a);\n}\n*/\n  state = {\n    address:[]\n  }\n\n  // this.setState({ piece : initialBoard()});\n  /*  processClick(position){\n    //TODO handle position click.\n    console.log(\"Position is\", position);\n      console.log(\"board is in process\", this.chessBoard.board());\n\n      this.chessBoard.move(this.retPosition(position));\n      console.log(\"board after move\", this.chessBoard.board);\n\n  }  */\n  retPosition(y,x){\n    let yCord = y;\n    let xCord = x % 8;\n\n    let xAxis = ['a','b','c','d','e','f','g','h'];\n\n    let retVal = xAxis[xCord]+yCord;\n    //console.log(retVal);\n    return retVal;\n\n  }\n  isEven(num){\n    return (num % 2 === 0);\n  }\n  mapy(str){\n    const c=[];\n    var j;\n    for(let i=0 , j=0 ;i<44;i++ && j++ ){\n      var char=ini(str[i]);\n\n\n      /*  if(Number(char)===true)               //is char a number?\n      {\n        for(let j=0;j<Number(char);j++){\n          c[i]='';\n      }\n      if(char==='/')\n      {\n        continue;\n      }\n\n      else{ */\n      c[j] = char;\n      //  c[j] = (char)!Number(char) ? char :  ;\n\n        console.log(\"character returns\", Number(c[j]));\n      }\n      //If it is a number.\n    //}\n      //this.setState({pieceSrc: c});\n\n   //}\n    console.log(\"Mapy returns\", c);\n    return(c);\n  }\n\n\n  eventReset=(e)=>{\n  //  this.map(this.chess.fen());\n    e.preventDefault();\n    var a = this.mapy(this.chess.fen());\n    console.log(\"value recv\",a);\n  //  a.map(item => console.log(item));\n\n  //  this.state.pieceSrc= a.map(item => this.setState({ pieceSrc : item }));\n    var b=[];\n    for(let i=8;i>=1;i--){\n      for(let j=0;j<8;j++){\n        b[i]=this.retPosition(i,j);\n      }\n    }\n  ////      var b = this.mapArrayToBoard(8,0,a);\n    this.setState({ address : a });\n\n  //  console.log(this.mapy(this.chess.fen()));\n    console.log(this.state.address);\n  }\n  mapArrayToBoard(i,j,ar){\n    var p = this.retPosition(i,j);\n    switch(p)\n    {\n      case 'a8':\n        return(ar[0]);\n      //  console.log(ar[0]);\n        break;\n      case 'a7':\n        return(ar[1]);\n        break;\n      default:\n        return(ar[18]);\n    }\n  }\n\n  render(){\n/*   var completeBoard =[];\n    for(var i=8;i>=1;i--){\n      var rowSquare =[];\n      for(var j=0;j<8;j++){\n        const squareColor = (this.isEven(i) && this.isEven(j)) || (!this.isEven(i) && !this.isEven(j))? \"square-white\" : \"square-black\";\n        rowSquare.push(<Square\n                          color={squareColor}\n                          position={this.retPosition(i,j)}\n                          key={this.retPosition(i,j)}\n                          pieceSrc={''}\n                      />);\n      }\n      completeBoard.push(rowSquare);\n    }\n  */\n  /*  var color=0;\n    var squares=[];\n    for(let i=0;i<64;i++)\n    {\n      if(i%16===0){\n        squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"KING\"} />);\n        color=0;\n      }\n      else if(i%8===0){\n        squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} piece={\"\"} />);\n        color = 1;\n      }\n      else if(color===1){\n        squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"\"} />);\n        color=0;\n      }\n      else{\n        squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} currentPiece={\"\"} />);\n        color=1;\n      }\n    }  */\n\n    return (\n      <div>\n      <button\n        onClick={this.eventReset}\n      >Reset</button>\n      <MappedBoard\n        address={this.state.address}\n      />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}