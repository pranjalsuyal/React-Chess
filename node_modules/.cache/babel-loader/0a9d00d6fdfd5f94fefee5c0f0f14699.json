{"ast":null,"code":"var _jsxFileName = \"/home/pranjal/Projects/chess/src/components/Game.js\";\nimport React from 'react';\nimport * as Chess from 'chess.js';\nimport ini from '../initialBoard';\nimport MappedBoard from './mappedBoard';\nimport '../index.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: [] //Array which stores image address of Board to be mapped\n\n    };\n\n    this.movefunc = (pos, piece) => {\n      if (piece !== '') {\n        this.source = pos;\n        console.log(\"source position is\", this.source);\n      } else {\n        if (this.source !== '') {\n          this.chess.move({\n            from: this.source,\n            to: pos\n          });\n          this.setState({\n            address: this.map(this.chess.fen())\n          });\n          this.source = '';\n        }\n      }\n    };\n\n    this.eventReset = e => {\n      e.preventDefault();\n      this.chess.reset();\n      var a = this.map(this.chess.fen());\n      this.setState({\n        address: a\n      });\n    };\n\n    this.eventClear = e => {\n      e.preventDefault();\n      this.chess.clear();\n      this.setState({\n        address: this.map(this.chess.fen())\n      });\n    };\n\n    this.chess = new Chess();\n  }\n\n  retPosition(y, x) {\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let retVal = xAxis[xCord] + yCord;\n    return retVal;\n  }\n\n  isEven(num) {\n    return num % 2 === 0;\n  }\n\n  map(str) {\n    const c = [];\n\n    for (let i = 0, j = 0; i < 64 && j < 64; i++) {\n      var char = ini(str[i]);\n\n      if (char === Number(char)) {\n        for (let k = 1; k <= Number(char); k++) {\n          c[j] = '';\n          j++;\n        }\n      } else if (char === '/') {\n        continue;\n      } else {\n        c[j] = char;\n        j++;\n      }\n    }\n\n    return c;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.eventReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.eventClear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Clear Board\"), React.createElement(MappedBoard, {\n      address: this.state.address,\n      movefunc: this.movefunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/components/Game.js"],"names":["React","Chess","ini","MappedBoard","Game","Component","constructor","props","state","address","movefunc","pos","piece","source","console","log","chess","move","from","to","setState","map","fen","eventReset","e","preventDefault","reset","a","eventClear","clear","retPosition","y","x","yCord","xCord","xAxis","retVal","isEven","num","str","c","i","j","char","Number","k","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Chess from 'chess.js';\n\nimport ini from '../initialBoard';\nimport  MappedBoard from './mappedBoard';\nimport '../index.css';\nclass Game extends React.Component{\n  constructor(props){\n    super(props);\n    this.chess= new Chess();\n  }\n  state = {\n    address:[]                                        //Array which stores image address of Board to be mapped\n  };\n  retPosition(y,x){\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a','b','c','d','e','f','g','h'];\n    let retVal = xAxis[xCord]+yCord;\n    return retVal;\n  }\n  isEven(num){\n    return (num % 2 === 0);\n  }\n  map(str){\n    const c=[];\n    for(let i=0 , j=0 ;i<64 && j<64;i++ ){\n      var char=ini(str[i]);\n      if(char === Number(char))\n      {\n        for(let k=1;k<=Number(char);k++){\n          c[j]='';\n          j++;\n      }\n      }\n      else if(char === '/'){\n        continue;\n      }\n      else{\n      c[j] = char;\n      j++;\n      }\n    }\n    return(c);\n  }\n  movefunc = (pos,piece) => {\n    if(piece!==''){\n    this.source = pos;\n    console.log(\"source position is\",this.source);\n    }\n    else{\n      if(this.source!==''){\n        this.chess.move({from:this.source , to:pos});\n        this.setState({address : this.map(this.chess.fen())});\n        this.source='';\n      }\n    }\n  }\n\n\n  eventReset=(e)=>{\n    e.preventDefault();\n    this.chess.reset();\n    var a = this.map(this.chess.fen());\n    this.setState({ address : a });\n  }\n  eventClear=(e)=>{\n    e.preventDefault();\n    this.chess.clear();\n    this.setState({ address : this.map(this.chess.fen())});\n  }\n  render(){\n    return (\n      <div>\n      <button\n        onClick={this.eventReset}\n      >Reset</button>\n      <button\n        onClick={this.eventClear}\n      >Clear Board</button>\n      <MappedBoard\n        address={this.state.address}\n        movefunc={this.movefunc}\n      />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}