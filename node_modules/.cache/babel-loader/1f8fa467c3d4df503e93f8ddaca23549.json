{"ast":null,"code":"var _jsxFileName = \"/home/pranjal/Projects/chess/src/components/Board.js\";\nimport React from 'react';\nimport * as Chess from 'chess.js';\nimport Square from './Square';\nimport '../index.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chess = new Chess();\n    console.log(\"board is\", this.chess);\n    console.log(this.chess.ascii());\n    this.chess.move('e3');\n    console.log(this.chess.ascii());\n    console.log(this.chess.fen()); //console.log(this.chess.square());\n  }\n\n  processClick(position) {\n    //TODO handle position click.\n    console.log(\"Position is\", position);\n    console.log(\"board is in process\", this.chessBoard.board());\n    this.chessBoard.move(this.retPosition(position));\n    console.log(\"board after move\", this.chessBoard.board);\n  }\n\n  retPosition(y, x) {\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let retVal = xAxis[xCord] + yCord; //console.log(retVal);\n\n    return retVal;\n  }\n\n  isEven(num) {\n    return num % 2 === 0;\n  }\n\n  render() {\n    var completeBoard = [];\n\n    for (var i = 8; i >= 1; i--) {\n      var rowSquare = [];\n\n      for (var j = 0; j < 8; j++) {\n        const squareColor = this.isEven(i) && this.isEven(j) || !this.isEven(i) && !this.isEven(j) ? \"square-white\" : \"square-black\";\n        rowSquare.push(React.createElement(Square, {\n          color: squareColor,\n          position: this.retPosition(i, j),\n          key: this.retPosition(i, j),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      }\n\n      completeBoard.push(rowSquare);\n    }\n    /*  var color=0;\n      var squares=[];\n      for(let i=0;i<64;i++)\n      {\n        if(i%16===0){\n          squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"KING\"} />);\n          color=0;\n        }\n        else if(i%8===0){\n          squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} piece={\"\"} />);\n          color = 1;\n        }\n        else if(color===1){\n          squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"\"} />);\n          color=0;\n        }\n        else{\n          squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} currentPiece={\"\"} />);\n          color=1;\n        }\n      }  */\n\n\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, completeBoard) //previously was {squares}\n    ;\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/components/Board.js"],"names":["React","Chess","Square","Board","Component","constructor","props","chess","console","log","ascii","move","fen","processClick","position","chessBoard","board","retPosition","y","x","yCord","xCord","xAxis","retVal","isEven","num","render","completeBoard","i","rowSquare","j","squareColor","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Chess from 'chess.js';\n\nimport Square from './Square';\n\nimport '../index.css';\nclass Board extends React.Component{\n\n\n\n constructor(props){\n    super(props);\n    this.chess = new Chess();\n    console.log(\"board is\", this.chess);\n    console.log(this.chess.ascii());\n    this.chess.move('e3');\n    console.log(this.chess.ascii());\n    console.log(this.chess.fen());\n    //console.log(this.chess.square());\n\n  }\n\n  processClick(position){\n    //TODO handle position click.\n    console.log(\"Position is\", position);\n      console.log(\"board is in process\", this.chessBoard.board());\n\n      this.chessBoard.move(this.retPosition(position));\n      console.log(\"board after move\", this.chessBoard.board);\n\n  }\n  retPosition(y,x){\n    let yCord = y;\n    let xCord = x % 8;\n\n    let xAxis = ['a','b','c','d','e','f','g','h'];\n\n    let retVal = xAxis[xCord]+yCord;\n    //console.log(retVal);\n    return retVal;\n\n  }\n  isEven(num){\n    return (num % 2 === 0);\n  }\n\n  render(){\n    var completeBoard =[];\n    for(var i=8;i>=1;i--){\n      var rowSquare =[];\n      for(var j=0;j<8;j++){\n        const squareColor = (this.isEven(i) && this.isEven(j)) || (!this.isEven(i) && !this.isEven(j))? \"square-white\" : \"square-black\";\n        rowSquare.push(<Square color={squareColor} position={this.retPosition(i,j)} key={this.retPosition(i,j)} />);\n      }\n      completeBoard.push(rowSquare);\n    }\n\n  /*  var color=0;\n    var squares=[];\n    for(let i=0;i<64;i++)\n    {\n      if(i%16===0){\n        squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"KING\"} />);\n        color=0;\n      }\n      else if(i%8===0){\n        squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} piece={\"\"} />);\n        color = 1;\n      }\n      else if(color===1){\n        squares.push(<Square color={\"square-white\"} position={this.retPosition(i)} piece={\"\"} />);\n        color=0;\n      }\n      else{\n        squares.push(<Square color={\"square-black\"} position={this.retPosition(i)} currentPiece={\"\"} />);\n        color=1;\n      }\n    }  */\n    return (\n\n      <div className=\"board\">{completeBoard}</div>   //previously was {squares}\n\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}