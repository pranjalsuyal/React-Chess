{"ast":null,"code":"var _jsxFileName = \"/home/pranjal/Projects/chess/src/components/mappedBoard.js\";\nimport React from 'react';\nimport Square from './Square';\nimport '../index.css';\n\nclass mappedBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ar = props.address;\n  }\n\n  isEven(num) {\n    return num % 2 === 0;\n  }\n\n  retPosition(y, x) {\n    let yCord = y;\n    let xCord = x % 8;\n    let xAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let retVal = xAxis[xCord] + yCord; //console.log(retVal);\n\n    return retVal;\n  }\n\n  render() {\n    var p = [];\n\n    for (let i = 8; i >= 1; i--) {\n      for (let j = 0; j < 8; j++) {\n        p[i] = retPosition(i, j);\n      }\n    }\n\n    var completeBoard = [];\n    var count = 0;\n\n    for (var i = 8; i >= 1; i--) {\n      var rowSquare = [];\n\n      for (var j = 0; j < 8; j++) {\n        const squareColor = isEven(i) && isEven(j) || !isEven(i) && !isEven(j) ? \"square-white\" : \"square-black\";\n        rowSquare.push(React.createElement(Square, {\n          color: squareColor,\n          position: retPosition(i, j),\n          key: retPosition(i, j),\n          pieceSrc: this.ar[count],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }));\n        count += 1;\n      }\n\n      completeBoard.push(rowSquare);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, completeBoard);\n  }\n\n}","map":{"version":3,"sources":["/home/pranjal/Projects/chess/src/components/mappedBoard.js"],"names":["React","Square","mappedBoard","Component","constructor","props","ar","address","isEven","num","retPosition","y","x","yCord","xCord","xAxis","retVal","render","p","i","j","completeBoard","count","rowSquare","squareColor","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,cAAP;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAAyC;AAEvCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,EAAL,GAAQD,KAAK,CAACE,OAAd;AACD;;AAEHC,EAAAA,MAAM,CAACC,GAAD,EAAK;AACT,WAAQA,GAAG,GAAG,CAAN,KAAY,CAApB;AACD;;AAEDC,EAAAA,WAAW,CAACC,CAAD,EAAGC,CAAH,EAAK;AACd,QAAIC,KAAK,GAAGF,CAAZ;AACA,QAAIG,KAAK,GAAGF,CAAC,GAAG,CAAhB;AAEA,QAAIG,KAAK,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,CAAZ;AAEA,QAAIC,MAAM,GAAGD,KAAK,CAACD,KAAD,CAAL,GAAaD,KAA1B,CANc,CAOd;;AACA,WAAOG,MAAP;AACD;;AAKCC,EAAAA,MAAM,GAAE;AACN,QAAIC,CAAC,GAAG,EAAR;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAE,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACnB,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EAAoB;AAChBF,QAAAA,CAAC,CAACC,CAAD,CAAD,GAAKT,WAAW,CAACS,CAAD,EAAGC,CAAH,CAAhB;AACH;AACF;;AACH,QAAIC,aAAa,GAAE,EAAnB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAI,IAAIH,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAE,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACnB,UAAII,SAAS,GAAE,EAAf;;AACA,WAAI,IAAIH,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EAAoB;AAClB,cAAMI,WAAW,GAAIhB,MAAM,CAACW,CAAD,CAAN,IAAaX,MAAM,CAACY,CAAD,CAApB,IAA6B,CAACZ,MAAM,CAACW,CAAD,CAAP,IAAc,CAACX,MAAM,CAACY,CAAD,CAAlD,GAAwD,cAAxD,GAAyE,cAA7F;AACAG,QAAAA,SAAS,CAACE,IAAV,CAAe,oBAAC,MAAD;AACG,UAAA,KAAK,EAAED,WADV;AAEG,UAAA,QAAQ,EAAEd,WAAW,CAACS,CAAD,EAAGC,CAAH,CAFxB;AAGG,UAAA,GAAG,EAAEV,WAAW,CAACS,CAAD,EAAGC,CAAH,CAHnB;AAIG,UAAA,QAAQ,EAAE,KAAKd,EAAL,CAAQgB,KAAR,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAf;AAMAA,QAAAA,KAAK,IAAE,CAAP;AACD;;AACDD,MAAAA,aAAa,CAACI,IAAd,CAAmBF,SAAnB;AACD;;AACC,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBF,aAAxB,CADF;AAIH;;AApDwC","sourcesContent":["import React from 'react';\nimport Square from './Square';\nimport '../index.css';\n\nclass mappedBoard extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.ar=props.address;\n  }\n\nisEven(num){\n  return (num % 2 === 0);\n}\n\nretPosition(y,x){\n  let yCord = y;\n  let xCord = x % 8;\n\n  let xAxis = ['a','b','c','d','e','f','g','h'];\n\n  let retVal = xAxis[xCord]+yCord;\n  //console.log(retVal);\n  return retVal;\n}\n\n\n\n\n  render(){\n    var p = [];\n    for(let i=8;i>=1;i--){\n      for(let j=0;j<8;j++){\n          p[i]=retPosition(i,j);\n      }\n    }\n  var completeBoard =[];\n  var count = 0;\n  for(var i=8;i>=1;i--){\n    var rowSquare =[];\n    for(var j=0;j<8;j++){\n      const squareColor = (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))? \"square-white\" : \"square-black\";\n      rowSquare.push(<Square\n                        color={squareColor}\n                        position={retPosition(i,j)}\n                        key={retPosition(i,j)}\n                        pieceSrc={this.ar[count]}\n                    />);\n      count+=1;\n    }\n    completeBoard.push(rowSquare);\n  }\n    return(\n      <div className=\"board\">{completeBoard}</div>\n    )\n\n}\n}\n"]},"metadata":{},"sourceType":"module"}